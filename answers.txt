# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Kevin Balke
Student ID: 104319249
Email: kbalke@ucla.edu

# Partner 2 (if you're working in a team)
Name:
Student ID:
Email:

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

I used pthreads. The peer first accesses the tracker and serially obtains the
peer list for all of the files it wants. Then, it spawns one thread per file
and each of those threads calls task_download().

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
on line 982: call to osp2p_scanf() is potentially unbounded as head and tail
grow until INT_MAX. Fixed by bounding it with (worst case) FILENAMESIZ-1

in start_download(), I reimplemented the peer information fetch to use
a fixed size buffer whilst streaming the data. The tracker is trusted, but
even in the case that it sends malformed peer info, the program will safely die.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
The peer only services requests for files that exist in the subdirectory (either
specified with -d or the directory within which osppeer itself resides). This
is done by scanning the filename string for instances of ./, ../, //, etc...
and monitoring the directory level (an integer) for ever dropping negative (meaning
that the path leads the interpreter outside of the original subdirectory).

There is an upper bound on the amount of data that can be transferred, enforced
by checking t->total_written > MAX_TOTAL_DL_SIZE (line 374).

There is also an upper bound on the number of concurrent upload threads that can exist.
This is enforced through the use of a thread counter (u_thread_counter), updated
inside of calls to pthread_mutex_lock()/..._unlock(). If there are too many threads
(== MAX_PARALLEL_OPERATIONS), then no new threads are spawned to service uploads
until some of the others die off.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
I implemented an exploit for downloading an arbitrary file (in this case, /etc/passwd).
The peer first obtains peers that have cat1.jpg, and then sends them all requests
(GET ... OSP2P) for a different file (/etc/passwd). Without proper path checking,
and with the correct permissions, the barebones peer code will service this request
and provide the file.

I also implemented an expoit for the buffer overrun bug with osp2p_scanf. The same
approach is used as for the arbitrary file download, but instead of sending a valid
filename outside of the subdirectory, an invalid name that exceeds the length of
task_t->filename (FILENAMESIZ) is sent repeatedly. If the peer has a tail index that
has been incremented sufficiently, this will overrun the filename buffer and could
be used to inject arbitrary code.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
